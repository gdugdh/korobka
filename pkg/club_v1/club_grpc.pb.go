// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: club.proto

package club_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClubV1Client is the client API for ClubV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubV1Client interface {
	ClubList(ctx context.Context, in *ClubListRequest, opts ...grpc.CallOption) (*ClubListResponse, error)
	// MatchV1
	ActiveMatchList(ctx context.Context, in *MatchListRequest, opts ...grpc.CallOption) (*MatchListResponse, error)
	FinishedMatchList(ctx context.Context, in *FinishedMatchListRequest, opts ...grpc.CallOption) (*FinishedMatchListResponse, error)
	GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*GetMatchResponse, error)
	// UserV1
	FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error)
}

type clubV1Client struct {
	cc grpc.ClientConnInterface
}

func NewClubV1Client(cc grpc.ClientConnInterface) ClubV1Client {
	return &clubV1Client{cc}
}

func (c *clubV1Client) ClubList(ctx context.Context, in *ClubListRequest, opts ...grpc.CallOption) (*ClubListResponse, error) {
	out := new(ClubListResponse)
	err := c.cc.Invoke(ctx, "/club_v1.ClubV1/ClubList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubV1Client) ActiveMatchList(ctx context.Context, in *MatchListRequest, opts ...grpc.CallOption) (*MatchListResponse, error) {
	out := new(MatchListResponse)
	err := c.cc.Invoke(ctx, "/club_v1.ClubV1/ActiveMatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubV1Client) FinishedMatchList(ctx context.Context, in *FinishedMatchListRequest, opts ...grpc.CallOption) (*FinishedMatchListResponse, error) {
	out := new(FinishedMatchListResponse)
	err := c.cc.Invoke(ctx, "/club_v1.ClubV1/FinishedMatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubV1Client) GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*GetMatchResponse, error) {
	out := new(GetMatchResponse)
	err := c.cc.Invoke(ctx, "/club_v1.ClubV1/GetMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubV1Client) FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error) {
	out := new(FriendListResponse)
	err := c.cc.Invoke(ctx, "/club_v1.ClubV1/FriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubV1Server is the server API for ClubV1 service.
// All implementations must embed UnimplementedClubV1Server
// for forward compatibility
type ClubV1Server interface {
	ClubList(context.Context, *ClubListRequest) (*ClubListResponse, error)
	// MatchV1
	ActiveMatchList(context.Context, *MatchListRequest) (*MatchListResponse, error)
	FinishedMatchList(context.Context, *FinishedMatchListRequest) (*FinishedMatchListResponse, error)
	GetMatch(context.Context, *GetMatchRequest) (*GetMatchResponse, error)
	// UserV1
	FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error)
	mustEmbedUnimplementedClubV1Server()
}

// UnimplementedClubV1Server must be embedded to have forward compatible implementations.
type UnimplementedClubV1Server struct {
}

func (UnimplementedClubV1Server) ClubList(context.Context, *ClubListRequest) (*ClubListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubList not implemented")
}
func (UnimplementedClubV1Server) ActiveMatchList(context.Context, *MatchListRequest) (*MatchListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveMatchList not implemented")
}
func (UnimplementedClubV1Server) FinishedMatchList(context.Context, *FinishedMatchListRequest) (*FinishedMatchListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishedMatchList not implemented")
}
func (UnimplementedClubV1Server) GetMatch(context.Context, *GetMatchRequest) (*GetMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatch not implemented")
}
func (UnimplementedClubV1Server) FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedClubV1Server) mustEmbedUnimplementedClubV1Server() {}

// UnsafeClubV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubV1Server will
// result in compilation errors.
type UnsafeClubV1Server interface {
	mustEmbedUnimplementedClubV1Server()
}

func RegisterClubV1Server(s grpc.ServiceRegistrar, srv ClubV1Server) {
	s.RegisterService(&ClubV1_ServiceDesc, srv)
}

func _ClubV1_ClubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubV1Server).ClubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club_v1.ClubV1/ClubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubV1Server).ClubList(ctx, req.(*ClubListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubV1_ActiveMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubV1Server).ActiveMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club_v1.ClubV1/ActiveMatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubV1Server).ActiveMatchList(ctx, req.(*MatchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubV1_FinishedMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishedMatchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubV1Server).FinishedMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club_v1.ClubV1/FinishedMatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubV1Server).FinishedMatchList(ctx, req.(*FinishedMatchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubV1_GetMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubV1Server).GetMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club_v1.ClubV1/GetMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubV1Server).GetMatch(ctx, req.(*GetMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubV1_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubV1Server).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club_v1.ClubV1/FriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubV1Server).FriendList(ctx, req.(*FriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubV1_ServiceDesc is the grpc.ServiceDesc for ClubV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "club_v1.ClubV1",
	HandlerType: (*ClubV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClubList",
			Handler:    _ClubV1_ClubList_Handler,
		},
		{
			MethodName: "ActiveMatchList",
			Handler:    _ClubV1_ActiveMatchList_Handler,
		},
		{
			MethodName: "FinishedMatchList",
			Handler:    _ClubV1_FinishedMatchList_Handler,
		},
		{
			MethodName: "GetMatch",
			Handler:    _ClubV1_GetMatch_Handler,
		},
		{
			MethodName: "FriendList",
			Handler:    _ClubV1_FriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club.proto",
}
